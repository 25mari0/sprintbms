services:
  backend:
    build:
      context: ./backend
    ports:
      - '5000:5000'
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=redis  # Point to Redis service
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD} 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy  # Wait for Redis to be ready
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 20


  db:
    image: postgres:15
    container_name: postgres_sprintbms
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine  # Use specific version and alpine for smaller size
    container_name: redis_sprintbms
    restart: unless-stopped  # Auto-restart policy
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf  # Custom config
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    sysctls:
      - net.core.somaxconn=1024  # Improve connection handling
    ulimits:
      memlock:
        soft: -1
        hard: -1

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_sprintbms
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False' # enables server mode for predefined connections
    ports:
      - '8080:80'
    depends_on:
      - db
    volumes:
      - ./pgadmin_data/servers.json:/pgadmin4/servers.json

  stripe-cli:
    image: stripe/stripe-cli
    container_name: stripe_cli_sprintbms
    environment:
      STRIPE_API_KEY: ${STRIPE_API_KEY}
    command: ["listen", "--forward-to", "http://host.docker.internal:5000/business/webhook"]
    ports:
      - '4242:4242'
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./stripe_data:/stripe

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  stripe_data:
